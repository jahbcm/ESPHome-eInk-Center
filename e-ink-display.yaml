esphome:
  name: e-ink-display
  friendly_name: e-ink display

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduinO

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: #your key

ota:
  - platform: esphome
    password: # your pw

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: True # connects directly to hidden network

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "E-Ink-Display Fallback Hotspot"
    password: "371zj7HohrIK"

captive_portal:

text_sensor:
  - platform: homeassistant
    id: moon_status
    entity_id: sensor.moon_phase

  - platform: homeassistant
    entity_id: weather.forecast_home
    id: weather

  - platform: homeassistant
    entity_id: sun.sun
    attribute: next_rising
    id: sunrise_hour

  - platform: homeassistant
    entity_id: sun.sun
    attribute: next_setting
    id: sunset_hour

i2c:
  - sda: 8
    scl: 9

sensor:

  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 600s
    id: wifisignal

  - platform: homeassistant
    entity_id: sensor.outside_thermometer_temperature
    id: temp_outside

  - platform: homeassistant
    entity_id: sensor.bathroom_thermometer_temperature
    id: temp_bathroom

  - platform: homeassistant
    entity_id: sensor.bedroom_thermometer_temperature
    id: temp_bedroom

  - platform: homeassistant
    entity_id: sensor.hall_thermometer_temperature
    id: temp_hall

  - platform: homeassistant
    entity_id: sensor.living_room_thermometer_temperature
    id: temp_living

  - platform: homeassistant
    entity_id: sensor.kitchen_thermometer_temperature
    id: temp_kitchen

  - platform: homeassistant
    entity_id: sensor.outside_thermometer_humidity
    id: hum_outside

  - platform: homeassistant
    entity_id: sensor.bathroom_thermometer_humidity
    id: hum_bathroom

  - platform: homeassistant
    entity_id: sensor.bedroom_thermometer_humidity
    id: hum_bedroom

  - platform: homeassistant
    entity_id: sensor.hall_thermometer_humidity
    id: hum_hall

  - platform: homeassistant
    entity_id: sensor.living_room_thermometer_humidity
    id: hum_living

  - platform: homeassistant
    entity_id: sensor.kitchen_thermometer_humidity
    id: hum_kitchen

  - platform: homeassistant
    entity_id: sensor.rain_expected_in
    id: rain_in
    on_raw_value: 
      then:
        - if:
            condition:
              lambda: 'return (x >= 1.0 && x <= 30.0 && int(x) % 5 == 0);'
            then:
              - delay: 50ms
              - component.update: epaper

  - platform: homeassistant
    entity_id: sensor.snow_expected_in
    id: snow_in
    on_raw_value: 
      then:
        - if:
            condition:
              lambda: 'return (x >= 1.0 && x <= 30.0 && int(x) % 5 == 0);'
            then:
              - delay: 50ms
              - component.update: epaper

  - platform: bmp280_i2c
    pressure:
      name: "Atm Pressure"
      id: pressure
    
  
  - platform: scd4x
    co2:
      name: "CO2" 
      id: co2
     
    measurement_mode: low_power_periodic
    ambient_pressure_compensation_source: pressure

  - platform: aht10
    variant: AHT20
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"

binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.bathroom_window_contact
    id: window_bathroom

  - platform: homeassistant
    entity_id: binary_sensor.bedroom_large_window_contact
    id: window_bedroom_1
    
  - platform: homeassistant
    entity_id: binary_sensor.bedroom_small_window_contact
    id: window_bedroom_2

  - platform: homeassistant
    entity_id: binary_sensor.kitchen_window_sensor_contact
    id: window_kitchen

  - platform: homeassistant
    entity_id: binary_sensor.living_room_small_window_contact
    id: window_living_1

switch:
  - platform: template
    name: "Coffee Alert"
    id: alert_coffee
    optimistic: True
    on_turn_on: 
      then:
        - delay: 300ms
        - component.update: epaper
    
    on_turn_off: 
      then:
        - delay: 300ms
        - component.update: epaper

time:
  - platform: homeassistant
    id: homeassistant_time

spi:
  clk_pin: 4
  mosi_pin: 6

font:
  - file: 'fonts/Roboto-Medium.ttf'
    id: roboto_med_17
    size: 17

  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_12
    size: 12

  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_15
    size: 15

  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_20
    size: 20
    glyphs:
      ['!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', '/','º']

  - file: 'fonts/Roboto-Bold.ttf'
    id: roboto_bold_20
    size: 20
    glyphs:
      ['!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', '/','º']

  - file: 'fonts/Roboto-Bold.ttf'
    id: roboto_bold_27
    size: 30
    glyphs:
      ['!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', '/','º']

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_80
    size: 80
    glyphs: [
      # Weather
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0594", # mdi-weather-night
      "\U000F0591", # mdi-weather-fog
      "\U000F0592", # mdi-weather-hail
      "\U000F0593", # mdi-weather-lightning
      "\U000F067E", # mdi-weather-lightning-rainy
      "\U000F0595", # mdi-weather-partly-cloudy
      "\U000F0596", # mdi-weather-pouring
      "\U000F0597", # mdi-weather-rainy
      "\U000F0598", # mdi-weather-snowy
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0599", # mdi-weather-sunny
      "\U000F059B", # mdi-weather-sunset-down
      "\U000F059C", # mdi-weather-sunset-up
      "\U000F059D", # mdi-weather-windy
      "\U000F059E", # mdi-weather-windy-variant
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_40
    size: 40
    glyphs: [
      # Weather
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0594", # mdi-weather-night
      "\U000F0591", # mdi-weather-fog
      "\U000F0592", # mdi-weather-hail
      "\U000F0593", # mdi-weather-lightning
      "\U000F067E", # mdi-weather-lightning-rainy
      "\U000F0595", # mdi-weather-partly-cloudy
      "\U000F0596", # mdi-weather-pouring
      "\U000F0597", # mdi-weather-rainy
      "\U000F0598", # mdi-weather-snowy
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0599", # mdi-weather-sunny
      "\U000F059B", # mdi-weather-sunset-down
      "\U000F059C", # mdi-weather-sunset-up
      "\U000F059D", # mdi-weather-windy
      "\U000F059E", # mdi-weather-windy-variant
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_15
    size: 15
    glyphs: [
      # Wifi
      "\U000F092F", # mdi-wifi-strength-outline
      "\U000F091F", # mdi-wifi-strength-1
      "\U000F0922", # mdi-wifi-strength-2
      "\U000F0925", # mdi-wifi-strength-3
      "\U000F0928", # mdi-wifi-strength-4
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_30
    size: 30
    glyphs: [
      # Sun
      "\U000F059A", # mdi-weather-sunset
      "\U000F0597", # mdi-weather-rainy
      "\U000F0598", # mdi-weather-snowy
      # Moon
      "\U000F0F64", # mdi-moon-new
      "\U000F0F67", # mdi-moon-waxing-crescent
      "\U000F0F61", # mdi-moon-first-quarter
      "\U000F0F68", # mdi-moon-waxing-gibbous
      "\U000F0F62", # mdi-moon-full
      "\U000F0F66", # mdi-moon-waning-gibbous
      "\U000F0F63", # mdi-moon-last-quarter
      "\U000F0F65", # mdi-moon-waning-crescent
      # Rooms
      "\U000F09A0", # mdi-shower
      "\U000F09A1", # mdi-shower-head
      "\U000F04B9", # mdi-sofa
      "\U000F0C99", # mdi-microwave
      "\U000F0FD1", # mdi-bed-king-outline
      "\U000F106E", # mdi-bed-single-outline
      "\U000F0322", # mdi-laptop
      "\U000F07F4", # mdi-television-classic
      "\U000F18D7", # outside
      "\U000F081A", # door hall
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_200
    size: 250
    glyphs: [
      "\U000F109F", # mdiCoffeeMaker 
      ]

# WeAct Studio 4.2 inch e-ink display
external_components:
  - source: github://pr#6209
    components: [ waveshare_epaper ]

display:
  - platform: waveshare_epaper
    busy_pin: 0
    reset_pin: 1
    dc_pin: 10
    cs_pin: 3
    update_interval: 600s
    full_update_every: 30 # avoid fading
    reset_duration: 2ms
    id: epaper
    model: 4.20in-v2 # comes from external component
    display_mode: full
# ---- end screen related config

    lambda: |-

      if (id(alert_coffee).state)
      {
        it.print(200, 150, id(weather_font_200), TextAlign::CENTER, "\U000F109F");
        return;
      }

      // SENSOR VARIABLES
      std::string moon_info = id(moon_status).state;
      std::string sunrise = id(sunrise_hour).state;
      std::string sunset = id(sunset_hour).state;

      std::unordered_map<std::string, std::string> weather_icon_state {
          {"cloudy", "\U000F0590"},
          {"clear-day", "\U000F0599"},
          {"clear-night", "\U000F0594"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"partlycloudy", "\U000F0595"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"}
      };

      std::unordered_map<std::string, std::string> moon_state_icon {
          {"new_moon", "\U000F0F64"},
          {"waxing_crescent", "\U000F0F67"},
          {"first_quarter", "\U000F0F61"},
          {"waxing_gibbous", "\U000F0F68"},
          {"full_moon", "\U000F0F62"},
          {"waning_gibbous", "\U000F0F66"},
          {"last_quarter", "\U000F0F63"},
          {"waning_crescent", "\U000F0F65"}
      };
      
      char delimm = ';';

      // MAIN RECTANGLE
      it.rectangle(5, 5, 395, 295);
      
      // CALENDAR RECT
      it.rectangle(10, 10, 120, 30);
      it.rectangle(10, 40, 120, 150);
      it.rectangle(10, 190, 120, 105);
      
      // DX RECT 
      it.rectangle(135, 10, 255, 199);
      
      // VERTICAL LINES 
      it.line(262, 10, 262, 209);

      // HORIZONTAL LINES
      it.line(135, 76, 389, 76);
      it.line(135, 142, 389, 142);
      it.line(135, 208, 389, 208);
      
      // std::iota_view not supported, undef symbol
      for (short i=0; i<4; ++i){
        switch(i)
        {
            case 0: // Day of the week
                it.strftime(70, 30, id(roboto_reg_20), /*COLOR_OFF,*/ TextAlign::BASELINE_CENTER, "%A", id(homeassistant_time).now());
                break;

            case 1: // Weather Icon
                it.printf(70, 115, id(weather_font_80), TextAlign::BASELINE_CENTER, "%s", weather_icon_state[id(weather).state.c_str()].c_str());
                break;

            case 2: // Current Temp
                it.printf(70, 150, id(roboto_bold_27), TextAlign::BASELINE_CENTER, "%.1f °C", id(temp_outside).state);
                it.printf(70, 180, id(roboto_bold_20), TextAlign::BASELINE_CENTER, "%.1f %s", id(hum_outside).state, "%");
                break;
            
            case 3: // rain/ snow expected in
              if (id(snow_in).state > 0 && id(snow_in).state < 120)
              {
                it.print(70, 245, id(weather_font_40), TextAlign::BASELINE_CENTER, "\U000F0598");
                it.printf(70, 280, id(roboto_bold_20), TextAlign::BASELINE_CENTER, "in %.0f min", id(snow_in).state);
              }
              else
              if (id(rain_in).state > 0 && id(rain_in).state < 120)
              {
                it.print(70, 245, id(weather_font_40), TextAlign::BASELINE_CENTER, "\U000F0597");
                it.printf(70, 280, id(roboto_bold_20), TextAlign::BASELINE_CENTER, "in %.0f min", id(rain_in).state);
              }
              break;
              
            default:
              break;
        }

      }

      short ttx = 137;   // start text position x 
      short tty = 70;    // start text position y 
      short tix = 140;   // start icon position x 
      short tiy = 15;    // start icon position y 

      short txoffset = 64;
      short tyoffset = 66;

      // Loop for each field
      for (short i = 1; i < 7; ++i) {
        switch (i) 
        {
          case 1: // Living room, 0, 1
            
            it.printf(tix + (txoffset * 0), tiy + (tyoffset * 0), id(weather_font_30), TextAlign::TOP_LEFT, "%s", "\U000F07F4");
            it.printf(ttx + (txoffset * 1) - 15, tiy + (tyoffset * 0) + 3, id(roboto_reg_20), TextAlign::TOP_LEFT, "%.1f °C", id(temp_living).state);

            if (id(window_living_1).state)
              it.print(ttx + (txoffset * 1), tty + (tyoffset * 0) - 5, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "WINDOW");
        
            else
              it.printf(ttx + (txoffset * 1) - 15, tty + (tyoffset * 0) - 5, id(roboto_reg_20), TextAlign::BASELINE_LEFT, "%.1f %s", id(hum_living).state, "%");
            
            break;

          case 2: // Bedroom, 1, 1
                
            it.printf(tix + (txoffset * 0), tiy + (tyoffset * 1), id(weather_font_30), TextAlign::TOP_LEFT, "%s", "\U000F106E");
            it.printf(ttx + (txoffset * 1) - 15, tiy + (tyoffset * 1) + 3, id(roboto_reg_20), TextAlign::TOP_LEFT, "%.1f °C", id(temp_bedroom).state);

            if (id(window_bedroom_1).state || id(window_bedroom_2).state)
              it.print(ttx + (txoffset * 1), tty + (tyoffset * 1) - 5, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "WINDOW");
        
            else
              it.printf(ttx + (txoffset * 1) - 15, tty + (tyoffset * 1) - 5, id(roboto_reg_20), TextAlign::BASELINE_LEFT, "%.1f %s", id(hum_bedroom).state, "%");

            break;


          case 3: // Kitchen, 0, 3
              
            it.printf(tix + (txoffset * 0), tiy + (tyoffset * 2), id(weather_font_30), TextAlign::TOP_LEFT, "%s", "\U000F0C99");
            it.printf(ttx + (txoffset * 1) - 15, tiy + (tyoffset * 2) + 3, id(roboto_reg_20), TextAlign::TOP_LEFT, "%.1f °C", id(temp_kitchen).state);

            if (id(window_kitchen).state)
              it.print(ttx + (txoffset * 1), tty + (tyoffset * 2) - 5, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "WINDOW");
        
            else
              it.printf(ttx + (txoffset * 1) - 15, tty + (tyoffset * 2) - 5, id(roboto_reg_20), TextAlign::BASELINE_LEFT, "%.1f %s", id(hum_kitchen).state, "%");

            break;

          
          case 4: // Bathroom, 0, 2
              
            it.printf(tix + (txoffset * 2), tiy + (tyoffset * 2), id(weather_font_30), TextAlign::TOP_LEFT, "%s", "\U000F09A0");
            it.printf(ttx + (txoffset * 3) - 15, tiy + (tyoffset * 2) + 3, id(roboto_reg_20), TextAlign::TOP_LEFT, "%.1f °C", id(temp_bathroom).state);

            if (id(window_bathroom).state)
              it.print(ttx + (txoffset * 3), tty + (tyoffset * 2) - 5, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "WINDOW");
        
            else
              it.printf(ttx + (txoffset * 3) - 15, tty + (tyoffset * 2) - 5, id(roboto_reg_20), TextAlign::BASELINE_LEFT, "%.1f %s", id(hum_bathroom).state, "%");
            
            break;
                

          case 5: // Hall, 1, 2
            it.printf(tix + (txoffset * 2), tiy + (tyoffset * 1), id(weather_font_30), TextAlign::TOP_LEFT, "%s", "\U000F081A");
            it.printf(ttx + (txoffset * 3) - 15, tiy + (tyoffset * 1) + 3, id(roboto_reg_20), TextAlign::TOP_LEFT, "%.1f °C", id(temp_hall).state);
            it.printf(ttx + (txoffset * 3) - 15, tty + (tyoffset * 1) - 5, id(roboto_reg_20), TextAlign::BASELINE_LEFT, "%.1f %s", id(hum_hall).state, "%");
            break;

          case 6: // CO2 ppm
            it.printf(ttx + (txoffset * 0), tiy + (tyoffset * 3), id(roboto_bold_27), TextAlign::TOP_LEFT, "%.0f ppm", id(co2).state);
            break;

          default:
            break;
        }
      }

      // SUNRISE SUNSET
      ESP_LOGD("SUNRISE", "%s", sunrise.c_str());
      ESP_LOGD("SUNSET", "%s", sunset.c_str());
      it.printf(270, 15, id(weather_font_30), TextAlign::TOP_LEFT, "%s", "\U000F059A");
      
      {
        auto realHour = [&] (std::string& sunset) -> std::string {
          if (sunset.empty())
            return "n.a.";

          auto hour = sunset.substr(sunset.find("T")+1, 2);
          auto min = sunset.substr(sunset.find("T")+4, 2);
          auto intHour = std::stoi(hour);

          if (id(homeassistant_time).now().is_dst)
            intHour += 2;
          else
            intHour += 1;

          if (intHour < 10)
            return std::to_string(0) + std::to_string(intHour) + ":" + min;

          return std::to_string(intHour) + ":" + min;
        };
        it.printf(300, 36, id(roboto_reg_15), TextAlign::BASELINE_LEFT, (realHour(sunrise) + "/" + realHour(sunset)).c_str());

      } 
      
      // MOON PHASE
      if (auto iter = moon_state_icon.find(moon_info.c_str()); iter != moon_state_icon.end()) // no contains unfortunately
      {
        ESP_LOGD("MOON", "%s", moon_info.c_str());
        // Icon 
        it.printf(270, 45, id(weather_font_30), TextAlign::TOP_LEFT, "%s", iter->second.c_str());

        // Label 
        it.printf(300, 65, id(roboto_reg_12), TextAlign::BASELINE_LEFT, "%s", moon_info.c_str());
      }

      // FOOTER
      it.strftime(355, 295 , id(roboto_reg_15), TextAlign::BASELINE_RIGHT , "%A, %d %B %H:%M", id(homeassistant_time).now());

      // WIFI SIGNAL 
      if(id(wifisignal).has_state()) {
        short wifi_x = 375;
        short wifi_y = 295;
        const auto nWifiState = id(wifisignal).state;

        // TODO: use a regular map with lambdas, use lower_bound to access correct range 

        const auto mapSigns = std::map<int, std::string>{ 
          {-50, "\U000F0928"}, 
          {-60, "\U000F0925"}, 
          {-75, "\U000F0922"}, 
          {-100, "\U000F091F"} 
        };

        auto lb = mapSigns.lower_bound(nWifiState);

        if (lb != mapSigns.end())
          it.print(wifi_x, wifi_y, id(weather_font_15), TextAlign::BASELINE_CENTER, lb->second.c_str());

        else
          it.print(wifi_x, wifi_y, id(weather_font_15), TextAlign::BASELINE_CENTER, "\U000F092F");
      } 



          
